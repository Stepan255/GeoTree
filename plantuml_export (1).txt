@startumlclass Repository{  - geoTree:Node  - rootlessPersons:   - personsWithoutConnections: PersonsWithoutConnections  --  + read(persons: ArrayList<Person>)  + create(Node)}class PersonsWithoutConnections{  - persons: ArrayList<Person>  - connections: HashMap<idRelative: Integer, idPersons: ArrayList<int>>    }class Node {  - person: Person  - childrens: ArrayList<Node>  --  + addChildrens(childrens: Node[])  + findPersons(idPersons: int[]): Node[]  + }class Person {  - id: int  - lastName: String  - firstName: String  - sex: Sex  - relationships: <Relationship>  - idMother: int  - idFather: int  --  + getId(): int    + addRelationships(Relationships: Relationship[])  + remuveRelationships(Relationships: Relationship[])    + getIdFather(): int  + setIdFather(id: int)    + getIdMother(): int  + setIdMother(id: int)    + getSex(): Sex    + getFirstName(): String  + setFirstName(newFirstName: String)    + getLastName(): String  + setLastName(newLastName: String)}class Relationship{  - relationship: Kinship  - idRelative: int}enum Kinship{  ancestor (-1),  descendant(-1)  ==  - numberKinship: int  --  + getNumberKinship(): int  + setNumberKinship(numberKinship: int)    }enum Sex {  male,  female,  unspecified}Node -> PersonPerson -> RelationshipRepository --> NodeRepository -> PersonsWithoutConnections@enduml